#include "recieverdata.h"

/*double GILBERT_COEFF[GILBERT_POR + 1] = { 4.54486433486115e-05, -0.0319136045611685, -3.31277815639291e-05,
-0.0260478358874455, -1.59427170179442e-06, -0.0373284021357407, 3.46942587567515e-06, -0.0531107459937533,
-1.03378562696214e-06, -0.0766995375013512, -5.96683448033596e-06, -0.116853826766850, 1.66624629076986e-05,
-0.205805810057242, -1.89302802971010e-05, -0.634472629392063, 0, 0.634472629392063, 1.89302802971010e-05,
0.205805810057242, -1.66624629076986e-05, 0.116853826766850, 5.96683448033596e-06, 0.0766995375013512,
1.03378562696214e-06, 0.0531107459937533, -3.46942587567515e-06, 0.0373284021357407, 1.59427170179442e-06,
0.0260478358874455, 3.31277815639291e-05, 0.0319136045611685, -4.54486433486115e-05 };*/

double GILBERT_COEFF[GILBERT_POR + 1] = { 1.12766257565378e-15, -0.000130476138946637, 1.08440643400614e-15, -0.000202974874492264,
1.30697021891335e-15, -0.000354719283426647, 2.46669069323428e-15, -0.000575250463727568, 2.80690169882469e-15, -0.000883857088375641,
4.33981913868786e-15, -0.00130330168977613, 4.55511698436463e-15, -0.00185939798324038, 7.19669940463062e-15, -0.00258167356074216,
7.48708480201243e-15, -0.00350379792006896, 8.76528269737490e-15, -0.00466413199499281, 9.63857434562979e-15, -0.00610684027599471, 
1.17297636440659e-14, -0.00788378504050172, 1.15212299759957e-14, -0.0100574770235473, 1.28212542532071e-14, -0.0127057846270374,
1.31705203848549e-14, -0.0159297427523464, 1.31626169983955e-14, -0.0198667595692114, 1.32911861084294e-14, -0.0247135142548792,
1.29403657015555e-14, -0.0307674767459450, 1.25408237791250e-14, -0.0385071038803095, 1.05838177775279e-14, -0.0487598745391298, 
9.65209562304999e-15, -0.0630945205179159, 8.68191076750970e-15, -0.0848854458812239, 6.02711729550647e-15, -0.122931145484905,
4.38622442320337e-15, -0.209544916583793, 2.00671932765079e-15, -0.635728180480659, 0, 0.635728180480659, -2.00671932765079e-15,
0.209544916583793, -4.38622442320337e-15, 0.122931145484905, -6.02711729550647e-15, 0.0848854458812239, -8.68191076750970e-15,
0.0630945205179159, -9.65209562304999e-15, 0.0487598745391298, -1.05838177775279e-14, 0.0385071038803095, -1.25408237791250e-14,
0.0307674767459450, -1.29403657015555e-14, 0.0247135142548792, -1.32911861084294e-14, 0.0198667595692114, -1.31626169983955e-14,
0.0159297427523464, -1.31705203848549e-14, 0.0127057846270374, -1.28212542532071e-14, 0.0100574770235473, -1.15212299759957e-14,
0.00788378504050172, -1.17297636440659e-14, 0.00610684027599471, -9.63857434562979e-15, 0.00466413199499281, -8.76528269737490e-15,
0.00350379792006896, -7.48708480201243e-15, 0.00258167356074216, -7.19669940463062e-15, 0.00185939798324038, -4.55511698436463e-15,
0.00130330168977613, -4.33981913868786e-15, 0.000883857088375641, -2.80690169882469e-15, 0.000575250463727568, -2.46669069323428e-15,
0.000354719283426647, -1.30697021891335e-15, 0.000202974874492264, -1.08440643400614e-15, 0.000130476138946637, -1.12766257565378e-15 };

quint32 RecieverData::getFreqDiskr()
{
    return freqDiskr;
}

void RecieverData::setFreqDiskr(quint32 value)
{
    freqDiskr = value;
}

RecieverData::RecieverData(QObject *parent)
    : QObject(parent)
{
	freqDiskr = 300000;
    delayLine.resize(GILBERT_POR + 1,0);
}

RecieverData::~RecieverData()
{
}


double RecieverData::Gilbert(double & sample)
{
	double res = 0;
	double *p1 = &GILBERT_COEFF[0];
	double *p2 = &delayLine[0];
	memmove(&delayLine[1], &delayLine[0], (GILBERT_POR) * sizeof(double));
	delayLine[0] = sample;
	for (volatile int i = 0; i < GILBERT_POR + 1; i++) {
		//res += delayLine[i] * GILBERT_COEFF[i];
		res += *p1 * *p2;
		p1++;
		p2++;
	}
	//res = std::inner_product(delayLine.begin(), delayLine.end(), &GILBERT_COEFF[0], (double)0.0);
	sample = delayLine[GILBERT_POR2]; // +1 ????
	return res;
}

complex_double RecieverData::complexMult(double & re, double & im)
{
	complex_double cmplx;
	double real = cos(2 * M_PI * 37500 * countFreq / freqDiskr);
	double image = -sin(2 * M_PI * 37500 * countFreq / freqDiskr);
	countFreq = (countFreq + 1) % freqDiskr;
	cmplx.re = (re* real - im * image);
	cmplx.im = (re*image + im * real);

	return cmplx;
}




void RecieverData::addNewData(QVector<double> _vec) {
	double sample;
	double inner_prod;
	complex_double cmplx;
	QList <QVector<double> > vl;
	QVector<double> v1, v2;// , v3;
	//QVector<qint16> vS;
	for (volatile int i = 0; i < _vec.size(); i++) {
		sample = _vec[i];
		inner_prod = Gilbert(sample);
		cmplx = complexMult(sample, inner_prod);
		v1.append(cmplx.re);
		v2.append(cmplx.im);
		/*v3.append(_vec[i]);
		vS.append(_vec[i]);*/
	}

	vl.append(v1);
	vl.append(v2);
	/*vl.append(v3);*/
	
	emit sendChartData(vl);

}









